// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entitles/item.dart';
import 'entitles/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2991653030238645718),
      name: 'Item',
      lastPropertyId: const obx_int.IdUid(10, 4052540585537623492),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8741631405361082448),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1322395431507151297),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 189703086753077342),
            name: 'isPickedUp',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6052268721509610893),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7654505278522551385),
            name: 'pickupTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8953431363877562308),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5443758892731576138),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5770046995949937565),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8414486794107949708),
            relationTarget: 'User'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5002497785494899483),
            name: 'driverId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7187463534542623946),
            relationTarget: 'User'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4052540585537623492),
            name: 'isUrgent',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 776245123130376692),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(2, 2752247423445540932),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7050899754481115148),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2752247423445540932),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'givenItems', srcEntity: 'Item', srcField: 'customer'),
        obx_int.ModelBacklink(
            name: 'receivedItems', srcEntity: 'Item', srcField: 'driver')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 776245123130376692),
      lastIndexId: const obx_int.IdUid(2, 7187463534542623946),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Item: obx_int.EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) => [object.customer, object.driver],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final pickupTimeOffset = fbb.writeString(object.pickupTime);
          final locationOffset = fbb.writeString(object.location);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isPickedUp);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, pickupTimeOffset);
          fbb.addOffset(5, locationOffset);
          fbb.addOffset(6, imageUrlOffset);
          fbb.addInt64(7, object.customer.targetId);
          fbb.addInt64(8, object.driver.targetId);
          fbb.addBool(9, object.isUrgent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isPickedUpParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final isUrgentParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final pickupTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Item(
              id: idParam,
              name: nameParam,
              isPickedUp: isPickedUpParam,
              isUrgent: isUrgentParam,
              description: descriptionParam,
              pickupTime: pickupTimeParam,
              location: locationParam,
              imageUrl: imageUrlParam);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.customer.attach(store);
          object.driver.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.driver.attach(store);
          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              obx_int.RelInfo<Item>.toOneBacklink(
                      8, object.id, (Item srcObject) => srcObject.customer):
                  object.givenItems,
              obx_int.RelInfo<Item>.toOneBacklink(
                      9, object.id, (Item srcObject) => srcObject.driver):
                  object.receivedItems
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = User(id: idParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<User>(
              object.givenItems,
              store,
              obx_int.RelInfo<Item>.toOneBacklink(
                  8, object.id, (Item srcObject) => srcObject.customer));
          obx_int.InternalToManyAccess.setRelInfo<User>(
              object.receivedItems,
              store,
              obx_int.RelInfo<Item>.toOneBacklink(
                  9, object.id, (Item srcObject) => srcObject.driver));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.id]
  static final id = obx.QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// see [Item.name]
  static final name = obx.QueryStringProperty<Item>(_entities[0].properties[1]);

  /// see [Item.isPickedUp]
  static final isPickedUp =
      obx.QueryBooleanProperty<Item>(_entities[0].properties[2]);

  /// see [Item.description]
  static final description =
      obx.QueryStringProperty<Item>(_entities[0].properties[3]);

  /// see [Item.pickupTime]
  static final pickupTime =
      obx.QueryStringProperty<Item>(_entities[0].properties[4]);

  /// see [Item.location]
  static final location =
      obx.QueryStringProperty<Item>(_entities[0].properties[5]);

  /// see [Item.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<Item>(_entities[0].properties[6]);

  /// see [Item.customer]
  static final customer =
      obx.QueryRelationToOne<Item, User>(_entities[0].properties[7]);

  /// see [Item.driver]
  static final driver =
      obx.QueryRelationToOne<Item, User>(_entities[0].properties[8]);

  /// see [Item.isUrgent]
  static final isUrgent =
      obx.QueryBooleanProperty<Item>(_entities[0].properties[9]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = obx.QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// see [User.name]
  static final name = obx.QueryStringProperty<User>(_entities[1].properties[1]);

  /// see [User.givenItems]
  static final givenItems = obx.QueryBacklinkToMany<Item, User>(Item_.customer);

  /// see [User.receivedItems]
  static final receivedItems =
      obx.QueryBacklinkToMany<Item, User>(Item_.driver);
}
